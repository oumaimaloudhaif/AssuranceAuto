# Name of the workflow
name: AssuranceAuto application workflow

# Event that triggers the CI
on:
  push:
    # Paths of files to consider when changed
    paths:
      - "src/**"
      - ".github/workflows/assuranceAutoWorkflow.yml"
  pull_request:
    # Branches to focus to consider when changed
    branches: [main]
    paths:
      - "src/**"
      - ".github/workflows/assuranceAutoWorkflow.yml"

jobs:
  project_build:

    # Install ubuntu in the server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      # Install the java version 17 (the version of java used in AssuranceAuto project) in the server
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
            java-version: '17'
            distribution: 'adopt'

      # Set up the maven dependencies caching to use pom in the cache when the pom is non changed
      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2

      # Install maven in the server
      - name: Install Maven dependencies
        run: mvn install

      # Run tests of the springBoot AssuranceAuto project
      - name: Run tests
        run: mvn --batch-mode --update-snapshots verify

    docker_build:

      runs-on: ubuntu-latest

      needs: project_build

      steps:
        - uses: actions/checkout@v3

        - name: Set up JDK 11
          uses: actions/setup-java@v3
          with:
            java-version: '11'
            distribution: 'adopt'

        - name: Cache Maven packages
          uses: actions/cache@v3
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        # It's an open source  machine for emulation and virtualization
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2

        # It helps to create a builder to build our docker image
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        # Login to docker
        - name: Dashboard to Docker Hub
          uses: docker/login-action@v2
          with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}
        # Build and push  the docker image
        - name: Build and push
          uses: docker/build-push-action@v4
          with:
              context: .
              file: Dockerfile
              push: true
              tags: AssuranceAuto:latest

        # Run the docker image
        - name: Run image in a container
          uses: addnab/docker-run-action@v3
          with:
               image: ${{ secrets.DOCKERHUB_USERNAME }}/AssuranceAuto:latest
               run: echo "Running the latest docker image"